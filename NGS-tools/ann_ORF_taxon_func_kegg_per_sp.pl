#!/usr/bin/perl -w
## ==============================================================================
## Automated annotation tools
##
## program written by
##                                      Weizhong Li, UCSD
##                                      liwz@sdsc.edu
##                                      http://weizhong-lab.ucsd.edu
## ==============================================================================

my $script_name = $0;
my $script_dir = $0;
   $script_dir =~ s/[^\/]+$//;
   $script_dir = "./" unless ($script_dir);
require "$script_dir/ann_local.pl";

# Given the ORF KO annotation (by ann_ORF_taxon_func.pl)
# This script read in Brite file (e.g. ko00001.keg  ko00002.keg  ko01000.keg  ko02000.keg),
# and calculate abundance of KO, ko, class, modules etc
# these .keg file are from KEGG database /kegg/kegg-brite/ko/

use Getopt::Std;
getopts("i:k:a:o:e:d:s:t:r:c:",\%opts);
die usage() unless ($opts{i} and $opts{k} and $opts{o} and $opts{r});

my $ORF_ann_file = $opts{i}; #### blast alignment file in m8 format
my $keg_file     = $opts{k}; #### e.g. ko00001.keg  ko00002.keg  ko01000.keg  ko02000.keg
my $output       = $opts{o}; #### output prefix kegg abundance file
my $ORF_depth    = $opts{d}; #### ORF depth
my $ref_KOs      = $opts{r}; #### single-copy house keeping gene
my $tmp_dir      = "$output.dir.$$";
my $ref_KO_cov_cutoff = $opts{c}; #### skip species unless with enough ref hits
   $ref_KO_cov_cutoff = 0.3 unless ($ref_KO_cov_cutoff);


my ($i, $j, $k, $ll, $cmd);
my $worker_script = "$script_dir/ann_ORF_taxon_func_kegg.pl -i $tmp_dir/in.txt -d $ORF_depth -k $keg_file -r $ref_KOs -o $tmp_dir/out"; 
if (-e $tmp_dir) {
  $cmd = `rm -rf $tmp_dir`;
}
$cmd = `mkdir $tmp_dir`;

my %single_copy_KOs = ();
open(TMP, $ref_KOs) || die "can not open $ref_KOs";
while($ll=<TMP>){ 
  if ($ll =~ /^\w\s+(K\d+)\s/) {
    $single_copy_KOs{$1} = 1;
  }
}
close(TMP);
my $num_ref_ko = scalar keys %single_copy_KOs;
my $num_ref_ko_cutoff = $num_ref_ko * $ref_KO_cov_cutoff;

my $last_sp = "";
my $last_sp_name = "";
my $orf_ann = "";
my %KO_hits = ();

open(TMP, $ORF_ann_file) || die "can not open $ORF_ann_file";
while($ll=<TMP>) {
  next if ($ll =~ /^#/);
  my @lls = split(/\t/, $ll);
  my $this_sp = $lls[0];
  my $this_sp_name = $lls[9];

  if (($this_sp ne $last_sp) and $orf_ann) {
    if (scalar keys %KO_hits >= $num_ref_ko_cutoff) {
      if ($last_sp =~ /\d+/) {
        run_this($orf_ann, $last_sp);
      }
      else {
        print STDERR "not valid species, $last_sp $last_sp_name";
      }
    } 
    else {
        my $n = scalar keys %KO_hits;
        print STDERR "not enough ref KO hits ($n) for species, $last_sp $last_sp_name";
    }
    %KO_hits = ();
    $orf_ann = "";
  }
  $orf_ann .= $ll;

  my $KO = $lls[11+7]; #### if hit KO
  $KO_hits{$KO} = 1 if (($KO =~ /^K\d+/) and $single_copy_KOs{$KO});
  $last_sp = $this_sp;
  $last_sp_name = $this_sp_name;
} 
  #### last block
  if ($last_sp and $orf_ann) {
    if (scalar keys %KO_hits >= $num_ref_ko_cutoff) {
      if ($last_sp =~ /\d+/) {
        run_this($orf_ann, $last_sp);
      }
      else {
        print STDERR "not valid species, $last_sp $last_sp_name";
      }
    } 
    else {
        my $n = scalar keys %KO_hits;
        print STDERR "not enough ref KO hits ($n) for species, $last_sp $last_sp_name";
    }
  }
close(TMP);

$cmd = `rm -rf $tmp_dir`;


sub run_this {
  my ($txt, $sp, $sp_name) = @_;
  my ($i, $j, $k, $ll, $cmd);
  $sp_name =~ s/\W/_/g;

  open(OUT, "> $tmp_dir/in.txt") || die "can not write to $tmp_dir/in.txt";
  print OUT $txt;
  close(OUT);

  $cmd = `$worker_script`;
  opendir(DIR, $tmp_dir) || die "can not read dir $tmp_dir";
  my @files = grep {/^out/} readdir(DIR);
  closedir(DIR);

  foreach $i (@files) {
    next if ($i =~ /-full-des$/); #### skip the super long format
    $j = $i; 
    $j =~ s/^out.//; $j = "$output.$j"; #### $j is target output
    if (not -e $j) {
      $cmd = `head -n 1 $tmp_dir/$i | sed "s/^/#Species\\tSpecies_name\\t/" > $j`;
    }
    $cmd = `grep -v "^#" $tmp_dir/$i | sed "s/^/$sp\\t$sp_name\\t/" >> $j`;
  }
}

sub usage {
<<EOD;
geneate kegg annotation per species

$script_name -i ORF_annotation_file -k .keg_file -o output -r single-copy-ref-gene-list

  options:
    -i ORF_annotation_file, generated by ann_ORF_taxon_func.pl
    -k .keg file, e.g. ko00001.keg  ko00002.keg  ko01000.keg  ko02000.keg
    -o output prefix,
    -d ORF depth file
    -r .keg file, contains a list of KOs of single copy house-keeping gene 
       as reference to calculate relative abundance. 
       e.g. there are 55 KOs M00178  Ribosome, bacteria [PATH:map03010] [BR:ko03011]
    -c cutoff , default 0.3, skip species unless with enough ref hits

EOD
}
